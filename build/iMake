#!/bin/bash

# Libraries path
DC_PATH="$HOME/Dassault/DC"
DC_BUILD="$DC_PATH/build"
DC_INCLUDE="$DC_PATH/include"
DC_LIBRARIES="$DC_PATH/lib/libDC"
METIS_PATH="$HOME/Programs/METIS"
METIS_INCLUDE="$METIS_PATH/include"
METIS_LIBRARIES="$METIS_PATH/lib/libmetis.a"
CILKVIEW_INCLUDE="$HOME/Programs/CilkTools/include/cilktools"

# Case insensitive comparisons
shopt -s nocasematch

# Check number of arguments
if [ $# -eq 0 ]; then
    echo -e "\\033[1;31mPlease specify the code version (Ref, DC, Hybrid, Coloring) \
             \\033[0;39m"
    exit
fi

# Parse arguments
VERSION=0
HYBRID=0
ARCHI=0
TREE=0
STATS=0
OPTIMIZED=0
OPENMP=0
DEBUG=0
VERBOSE=0
MATT=0
PAPI=0
VTUNE=0
CILKVIEW=0
for i in $@; do
	if [[ $i == "clean" ]]; then
	    rm -r CMakeCache.txt CMakeFiles/ cmake_install.cmake Makefile \
              external_files.mod mod_qvddump.mod 2> /dev/null
		echo -e "\\033[1;32mBuild directory has been cleaned up\\033[0;39m"
		exit
	elif [[ $i == "mrproper" ]]; then
	    rm -r CMakeCache.txt CMakeFiles/ cmake_install.cmake Makefile ../bin/* \
              external_files.mod mod_qvddump.mod 2> /dev/null
		echo -e "\\033[1;32mBuild & bin directories have been cleaned up\\033[0;39m"
		exit
	elif [[ $i == "ref" ]]; then
		VERSION="REF"
	elif [[ $i == "coloring" ]]; then
		VERSION="COLORING"
        OPENMP=1
	elif [[ $i == "dc" ]]; then
		VERSION="DC"
    elif [[ $i == "hybrid" ]]; then
        VERSION="DC"
        HYBRID=1
    elif [[ $i == "sse" ]]; then
        ARCHI="SSE"
    elif [[ $i == "avx" ]]; then
        ARCHI="AVX"
    elif [[ $i == "mic" ]]; then
        ARCHI="MIC"
	elif [[ $i == "tree" ]]; then
		TREE=1
    elif [[ $i == "stat" ]] || [[ $i == "stats" ]]; then
        STATS=1
	elif [[ $i == "optimized" ]] || [[ $i == "opti" ]]; then
		OPTIMIZED=1
	elif [[ $i == "openmp" ]] || [[ $i == "omp" ]]; then
		OPENMP=1
	elif [[ $i == "debug" ]] || [[ $i == "dbg" ]]; then
		DEBUG=1
	elif [[ $i == "verbose" ]]; then
		VERBOSE=1
	elif [[ $i == "matt" ]]; then
		MATT=1
        DEBUG=1
	elif [[ $i == "papi" ]]; then
		PAPI=1
	elif [[ $i == "vtune" ]]; then
		VTUNE=1
        DEBUG=1
	elif [[ $i == "cilkview" ]]; then
		CILKVIEW=1
	else
		echo -e "\\033[1;31mOption \"$i\" has been ignored\\033[0;39m"
	fi
done

# Check arguments
if [[ $VERSION != "ref" ]] && [[ $VERSION != "coloring" ]] &&
   [[ $VERSION != "dc" ]]; then
    echo -e "\\033[1;31mPlease specify the code version (Ref, DC, Hybrid, Coloring) \
             \\033[0;39m"
    exit
fi
if [[ $HYBRID == 1 ]] && [[ $ARCHI == 0 ]]; then
    echo -e "\\033[1;31mPlease specify the vector length (SSE, AVX, MIC)\\033[0;39m"
    exit
fi

# Configure D&C library
DC_ARGUMENTS=""
if [[ $HYBRID == 1 ]]; then
    DC_LIBRARIES=$DC_LIBRARIES\_Hybrid_$ARCHI
    DC_ARGUMENTS="$DC_ARGUMENTS hybrid $ARCHI"
elif [[ $ARCHI == "mic" ]]; then
    DC_LIBRARIES=$DC_LIBRARIES\_$ARCHI
    DC_ARGUMENTS="$DC_ARGUMENTS mic"
fi
if [[ $TREE == 1 ]]; then
    DC_LIBRARIES=$DC_LIBRARIES\_TreeCreation
    DC_ARGUMENTS="$DC_ARGUMENTS tree"
fi
if [[ $STATS == 1 ]]; then
    DC_LIBRARIES=$DC_LIBRARIES\_Stats
    DC_ARGUMENTS="$DC_ARGUMENTS stats"
fi
if [[ $DEBUG == 1 ]]; then
    DC_LIBRARIES=$DC_LIBRARIES\_Debug
    DC_ARGUMENTS="$DC_ARGUMENTS dbg"
fi
if [[ $VERBOSE == 1 ]]; then
    DC_ARGUMENTS="$DC_ARGUMENTS verbose"
fi
DC_LIBRARIES=$DC_LIBRARIES.so

# Compile D&C library
CURRENT_PATH=`pwd`
cd $DC_BUILD
./iMake $DC_ARGUMENTS
cd $CURRENT_PATH

# Cross compile for MIC
if [[ $ARCHI == "mic" ]]; then
	export CC=icc
	export CXX=icpc
	export FC=ifort
	export CFLAGS="-mmic"
	export CXXFLAGS=$CFLAGS
	export FFLAGS=$CFLAGS
	export MPI_C=mpiicc
	export MPI_CXX=mpiicpc

    if [[ $TREE == 1 ]]; then
	    cmake -DCMAKE_TOOLCHAIN_FILE="./cmake_template.cmake" \
              -DDC_INCLUDE=$DC_INCLUDE -DDC_LIBRARIES=$DC_LIBRARIES \
              -DMETIS_LIBRARIES=$METIS_LIBRARIES -DCILKVIEW_INCLUDE=$CILKVIEW_INCLUDE \
              -DVERSION=$VERSION -DHYBRID=$HYBRID -DARCHI=$ARCHI -DTREE=$TREE \
              -DOPTIMIZED=$OPTIMIZED -DOMP=$OPENMP -DDEBUG=$DEBUG -DVERBOSE=$VERBOSE \
              -DMATT=$MATT -DPAPI=$PAPI -DVTUNE=$VTUNE -DCILKVIEW=$CILKVIEW \
              . -G "Unix Makefiles"
    else
	    cmake -DCMAKE_TOOLCHAIN_FILE="./cmake_template.cmake" \
              -DDC_INCLUDE=$DC_INCLUDE -DDC_LIBRARIES=$DC_LIBRARIES \
              -DCILKVIEW_INCLUDE=$CILKVIEW_INCLUDE -DVERSION=$VERSION \
              -DHYBRID=$HYBRID -DARCHI=$ARCHI -DTREE=$TREE -DOPTIMIZED=$OPTIMIZED \
              -DOMP=$OPENMP -DDEBUG=$DEBUG -DVERBOSE=$VERBOSE -DMATT=$MATT \
              -DPAPI=$PAPI -DVTUNE=$VTUNE -DCILKVIEW=$CILKVIEW \
              . -G "Unix Makefiles"
    fi
else
    if [[ $TREE == 1 ]]; then
        cmake -DDC_INCLUDE=$DC_INCLUDE -DDC_LIBRARIES=$DC_LIBRARIES \
              -DMETIS_LIBRARIES=$METIS_LIBRARIES -DCILKVIEW_INCLUDE=$CILKVIEW_INCLUDE \
              -DVERSION=$VERSION -DHYBRID=$HYBRID -DARCHI=$ARCHI -DTREE=$TREE \
              -DOPTIMIZED=$OPTIMIZED -DOMP=$OPENMP -DDEBUG=$DEBUG -DVERBOSE=$VERBOSE \
              -DMATT=$MATT -DPAPI=$PAPI -DVTUNE=$VTUNE -DCILKVIEW=$CILKVIEW \
              . -G "Unix Makefiles"
    else
        cmake -DDC_INCLUDE=$DC_INCLUDE -DDC_LIBRARIES=$DC_LIBRARIES \
              -DCILKVIEW_INCLUDE=$CILKVIEW_INCLUDE -DVERSION=$VERSION \
              -DHYBRID=$HYBRID -DARCHI=$ARCHI -DTREE=$TREE -DOPTIMIZED=$OPTIMIZED \
              -DOMP=$OPENMP -DDEBUG=$DEBUG -DVERBOSE=$VERBOSE -DMATT=$MATT \
              -DPAPI=$PAPI -DVTUNE=$VTUNE -DCILKVIEW=$CILKVIEW \
              . -G "Unix Makefiles"
    fi
fi

# Compile
make -j 2
